var app=angular.module("shelleyApp",["ui.router","socket"]);app.config(["$stateProvider","$urlRouterProvider",function(e,n){n.otherwise("default"),n.when("","default"),n.when("/","default"),e.state("default",{url:"/default",templateUrl:"./public/views/default.html"}).state("example",{url:"/example",templateUrl:"./public/views/example.html"}).state("introduce",{url:"/introduce",templateUrl:"./public/views/introduce.html"}).state("contect",{url:"/contect",templateUrl:"./public/views/contect.html"})}]),app.controller("shelleyAppController",["$scope",function(e){e.title="shelleyframe",e.listData=[{name:"listitem1",icon:"icon-list",arrow:"icon-angle-right",second:[{name:"second-1"},{name:"second-2"},{name:"second-3"}]},{name:"listitem2",icon:"icon-info-sign",arrow:"icon-angle-right",second:[{name:"second-1"},{name:"second-2"},{name:"second-3"}]},{name:"listitem3",icon:"icon-info-sign",arrow:"icon-angle-right",second:[{name:"second-1"},{name:"second-2"},{name:"second-3"}]},{name:"listitem4",icon:"icon-info-sign",arrow:"icon-angle-right",second:[{name:"second-1"},{name:"second-2"},{name:"second-3"}]}]}]);
app.controller("contectCtler",function(o){console.log("contectCtler")});
app.directive("navTop",function(){return{restrict:"E",replace:!0,scope:{title:"=navtopTitle",iconright:"=iconright"},template:'<nav class="flex-box navtop"><div class="flex-item iconreback icon-angle-left" ng-click="returnback()"></div><div class="flex-item title">{{title}}</div><div class="flex-item iconright">{{iconright}}</div></nav>',link:function(e,i,l,s){e.returnback=function(){window.history.go(-1)}}}}),app.directive("navBottom",function(){return{restrict:"EA",replace:!0,scope:{},template:'<nav class="flex-box navbottom"><div class="flex-item flex-box-ver" ui-sref="default"><div class="icon-home flex-box"></div><p class="flex-box">首页</p></div><div class="flex-item flex-box-ver" ui-sref="example"><div class="icon-list flex-box"></div><p class="flex-box">举例</p></div><div class="flex-item flex-box-ver" ui-sref="introduce"><div class="icon-info-sign flex-box"></div><p class="flex-box">说明</p></div><div class="flex-item flex-box-ver" ui-sref="contect"><div class="icon-comments flex-box"></div><p class="flex-box">联系</p></div></nav>',link:function(e,i,l,s){}}}),app.directive("listView",function(){return{restrict:"E",replace:!0,scope:{listData:"="},template:'<ul class="listview" ng-click="showNextLevel($event)"><li class="item" ng-repeat="listitem in listData track by $index"><div class="icon {{listitem.icon}}"></div>{{listitem.name}}<div class="arrow {{listitem.arrow}}"></div><ul class="secondlevel"><li class="seconditem" ng-repeat="second in listitem.second track by $index">{{second.name}}</li></ul></li></ul>',link:function(e,i,l,s){var t=!1,c=!1;angular.forEach(e.listData,function(e,l){e.icon&&i[0].className.indexOf("hasIcon")<0&&(t=!0),e.arrow&&i[0].className.indexOf("hasArrow")<0&&(c=!0)}),t&&(i[0].className=i[0].className+" hasIcon"),c&&(i[0].className=i[0].className+" hasArrow",e.showNextLevel=function(e){console.log(e.srcElement);var l=(e.srcElement,e.srcElement.querySelector(".secondlevel"));if(l.className.indexOf("active")>0)l.className=l.className.split(" active").join("");else{for(var s=i[0].getElementsByClassName("item"),t=s.length,c=0;c<t;c++){var a=s[c].getElementsByTagName("ul")[0];a.className.indexOf("active")>0&&(a.className=a.className.split(" active").join(""))}l.className+=" active"}})}}}),app.directive("charRoom",function(){return{redirect:"E",replace:"true",scope:{},controller:"contectCtler",link:function(e,i,l,s){}}});
console.log("util");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXIuanMiLCJkaXJlY3RpdmUuanMiLCJ1dGlsLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIm90aGVyd2lzZSIsIndoZW4iLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIiRzY29wZSIsInRpdGxlIiwibGlzdERhdGEiLCJuYW1lIiwiaWNvbiIsImFycm93Iiwic2Vjb25kIiwiY29uc29sZSIsImxvZyIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwicmVwbGFjZSIsInNjb3BlIiwiaWNvbnJpZ2h0IiwidGVtcGxhdGUiLCJsaW5rIiwiZWxlbSIsImF0dHJzIiwiY29udHJvbGxlcmluc3RhbmNlIiwicmV0dXJuYmFjayIsIndpbmRvdyIsImhpc3RvcnkiLCJnbyIsImhhc0ljb24iLCJoYXNBcnJvdyIsImZvckVhY2giLCJpdGVtIiwiaW5kZXgiLCJjbGFzc05hbWUiLCJpbmRleE9mIiwic2hvd05leHRMZXZlbCIsImUiLCJzcmNFbGVtZW50Iiwib1VsU2Vjb25kIiwicXVlcnlTZWxlY3RvciIsInNwbGl0Iiwiam9pbiIsImFMaSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJsZW4iLCJsZW5ndGgiLCJpIiwib1NlY1VsIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZWRpcmVjdCJdLCJtYXBwaW5ncyI6IkFBR0EsR0FBSUEsS0FBTUMsUUFBUUMsT0FBTyxjQUNyQixZQUNBLFVBRUpGLEtBQUlHLFFBQ0YsaUJBQ0EscUJBQ0EsU0FBVUMsRUFBZ0JDLEdBQ3hCQSxFQUFtQkMsVUFBVSxXQUM3QkQsRUFBbUJFLEtBQUssR0FBSSxXQUM1QkYsRUFBbUJFLEtBQUssSUFBSyxXQUM3QkgsRUFBZUksTUFBTSxXQUNuQkMsSUFBSyxXQUNMQyxZQUFhLGdDQUNaRixNQUFNLFdBQ1BDLElBQUssV0FDTEMsWUFBYSxnQ0FDWkYsTUFBTSxhQUNQQyxJQUFLLGFBQ0xDLFlBQWEsa0NBQ1pGLE1BQU0sV0FDUEMsSUFBSyxXQUNMQyxZQUFhLG1DQUtuQlYsSUFBSVcsV0FBVyx3QkFDYixTQUNBLFNBQVVDLEdBQ1JBLEVBQU9DLE1BQVEsZUFDZkQsRUFBT0UsV0FFSEMsS0FBTSxZQUNOQyxLQUFNLFlBQ05DLE1BQU8sbUJBQ1BDLFNBQ0lILEtBQU0sYUFDTkEsS0FBTSxhQUNOQSxLQUFNLGVBSVZBLEtBQU0sWUFDTkMsS0FBTSxpQkFDTkMsTUFBTyxtQkFDUEMsU0FDSUgsS0FBTSxhQUNOQSxLQUFNLGFBQ05BLEtBQU0sZUFJVkEsS0FBTSxZQUNOQyxLQUFNLGlCQUNOQyxNQUFPLG1CQUNQQyxTQUNJSCxLQUFNLGFBQ05BLEtBQU0sYUFDTkEsS0FBTSxlQUlWQSxLQUFNLFlBQ05DLEtBQU0saUJBQ05DLE1BQU8sbUJBQ1BDLFNBQ0lILEtBQU0sYUFDTkEsS0FBTSxhQUNOQSxLQUFNO0FDcEVsQmYsSUFBSVcsV0FBVyxlQUFnQixTQUFVQyxHQUN2Q08sUUFBUUMsSUFBSTtBQ0NkcEIsSUFBSXFCLFVBQVUsU0FBVSxXQUN0QixPQUNFQyxTQUFVLElBQ1ZDLFNBQVMsRUFDVEMsT0FDRVgsTUFBTyxlQUNQWSxVQUFXLGNBRWJDLFNBQVUsc05BQ1ZDLEtBQU0sU0FBVUgsRUFBT0ksRUFBTUMsRUFBT0MsR0FDbENOLEVBQU1PLFdBQWEsV0FDakJDLE9BQU9DLFFBQVFDLElBQUcsUUFNMUJsQyxJQUFJcUIsVUFBVSxZQUFhLFdBQ3pCLE9BQ0VDLFNBQVUsS0FDVkMsU0FBUyxFQUNUQyxTQUNBRSxTQUFVLG9pQkFDVkMsS0FBTSxTQUFVSCxFQUFPSSxFQUFNQyxFQUFPQyxRQUt4QzlCLElBQUlxQixVQUFVLFdBQVksV0FDeEIsT0FDRUMsU0FBVSxJQUNWQyxTQUFTLEVBQ1RDLE9BQVNWLFNBQVUsS0FDbkJZLFNBQVUsMFdBQ1ZDLEtBQU0sU0FBVUgsRUFBT0ksRUFBTUMsRUFBT0MsR0FNbEMsR0FBSUssSUFBVSxFQUFPQyxHQUFXLENBQ2hDbkMsU0FBUW9DLFFBQVFiLEVBQU1WLFNBQVUsU0FBVXdCLEVBQU1DLEdBQzFDRCxFQUFLdEIsTUFBUVksRUFBSyxHQUFHWSxVQUFVQyxRQUFRLFdBQWEsSUFDdEROLEdBQVUsR0FFUkcsRUFBS3JCLE9BQVNXLEVBQUssR0FBR1ksVUFBVUMsUUFBUSxZQUFjLElBQ3hETCxHQUFXLEtBR1hELElBQ0ZQLEVBQUssR0FBR1ksVUFBWVosRUFBSyxHQUFHWSxVQUFZLFlBRXRDSixJQUNGUixFQUFLLEdBQUdZLFVBQVlaLEVBQUssR0FBR1ksVUFBWSxZQUN4Q2hCLEVBQU1rQixjQUFnQixTQUFVQyxHQUM5QnhCLFFBQVFDLElBQUl1QixFQUFFQyxXQUVkLElBQXdCQyxJQUFkRixFQUFFQyxXQUF3QkQsRUFBRUMsV0FBV0UsY0FBYyxnQkFDL0QsSUFBSUQsRUFBVUwsVUFBVUMsUUFBUSxVQUFZLEVBQzFDSSxFQUFVTCxVQUFZSyxFQUFVTCxVQUFVTyxNQUFNLFdBQVdDLEtBQUssUUFDM0QsQ0FFTCxJQUFLLEdBRERDLEdBQU1yQixFQUFLLEdBQUdzQix1QkFBdUIsUUFBU0MsRUFBTUYsRUFBSUcsT0FDbkRDLEVBQUksRUFBR0EsRUFBSUYsRUFBS0UsSUFBSyxDQUM1QixHQUFJQyxHQUFTTCxFQUFJSSxHQUFHRSxxQkFBcUIsTUFBTSxFQUMzQ0QsR0FBT2QsVUFBVUMsUUFBUSxVQUFZLElBQ3ZDYSxFQUFPZCxVQUFZYyxFQUFPZCxVQUFVTyxNQUFNLFdBQVdDLEtBQUssS0FHOURILEVBQVVMLFdBQWEsaUJBT25DeEMsSUFBSXFCLFVBQVUsV0FBWSxXQUN4QixPQUNFbUMsU0FBVSxJQUNWakMsUUFBUyxPQUNUQyxTQUNBYixXQUFZLGVBQ1pnQixLQUFNLFNBQVVILEVBQU9JLEVBQU1DLEVBQU9DO0FDcEZ4Q1gsUUFBUUMsSUFBSSIsImZpbGUiOiJzaGVsbGV5ZnJhbWUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWRtaW5pc3RyYXRvciBvbiAxNi04LTE3LlxyXG4gKi9cclxudmFyIGFwcD1hbmd1bGFyLm1vZHVsZShcInNoZWxsZXlBcHBcIixbJ3VpLnJvdXRlcicsJ3NvY2tldCddKTtcclxuYXBwLmNvbmZpZyhmdW5jdGlvbigkc3RhdGVQcm92aWRlciwkdXJsUm91dGVyUHJvdmlkZXIpe1xyXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnZGVmYXVsdCcpO1xyXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLndoZW4oJycsJ2RlZmF1bHQnKTtcclxuICAgICR1cmxSb3V0ZXJQcm92aWRlci53aGVuKCcvJywnZGVmYXVsdCcpO1xyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgICAuc3RhdGUoJ2RlZmF1bHQnLHtcclxuICAgICAgICAgICAgdXJsOicvZGVmYXVsdCcsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOlwiLi9wdWJsaWMvdmlld3MvZGVmYXVsdC5odG1sXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnZXhhbXBsZScse1xyXG4gICAgICAgICAgICB1cmw6Jy9leGFtcGxlJyxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6Jy4vcHVibGljL3ZpZXdzL2V4YW1wbGUuaHRtbCdcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnaW50cm9kdWNlJyx7XHJcbiAgICAgICAgICAgIHVybDonL2ludHJvZHVjZScsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOicuL3B1YmxpYy92aWV3cy9pbnRyb2R1Y2UuaHRtbCdcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnY29udGVjdCcse1xyXG4gICAgICAgICAgICB1cmw6Jy9jb250ZWN0JyxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6Jy4vcHVibGljL3ZpZXdzL2NvbnRlY3QuaHRtbCdcclxuICAgICAgICB9KTtcclxufSk7XHJcbi8vYm9keSBjb250cm9sbGVyIHNoZWxsZXlBcHBDb250cm9sbGVyXHJcbmFwcC5jb250cm9sbGVyKCdzaGVsbGV5QXBwQ29udHJvbGxlcicsZnVuY3Rpb24oJHNjb3BlKXtcclxuICAgICRzY29wZS50aXRsZT1cInNoZWxsZXlmcmFtZVwiO1xyXG4gICAgJHNjb3BlLmxpc3REYXRhPVtcclxuICAgICAgICB7bmFtZTpcImxpc3RpdGVtMVwiLGljb246XCJpY29uLWxpc3RcIixhcnJvdzonaWNvbi1hbmdsZS1yaWdodCcsc2Vjb25kOltcclxuICAgICAgICAgICAge25hbWU6J3NlY29uZC0xJ30sXHJcbiAgICAgICAgICAgIHtuYW1lOidzZWNvbmQtMid9LFxyXG4gICAgICAgICAgICB7bmFtZTonc2Vjb25kLTMnfVxyXG4gICAgICAgIF19LFxyXG4gICAgICAgIHtuYW1lOlwibGlzdGl0ZW0yXCIsaWNvbjpcImljb24taW5mby1zaWduXCIsYXJyb3c6J2ljb24tYW5nbGUtcmlnaHQnLHNlY29uZDpbXHJcbiAgICAgICAgICAgIHtuYW1lOidzZWNvbmQtMSd9LFxyXG4gICAgICAgICAgICB7bmFtZTonc2Vjb25kLTInfSxcclxuICAgICAgICAgICAge25hbWU6J3NlY29uZC0zJ31cclxuICAgICAgICBdfSxcclxuICAgICAgICB7bmFtZTpcImxpc3RpdGVtM1wiLGljb246XCJpY29uLWluZm8tc2lnblwiLGFycm93OidpY29uLWFuZ2xlLXJpZ2h0JyxzZWNvbmQ6W1xyXG4gICAgICAgICAgICB7bmFtZTonc2Vjb25kLTEnfSxcclxuICAgICAgICAgICAge25hbWU6J3NlY29uZC0yJ30sXHJcbiAgICAgICAgICAgIHtuYW1lOidzZWNvbmQtMyd9XHJcbiAgICAgICAgXX0sXHJcbiAgICAgICAge25hbWU6XCJsaXN0aXRlbTRcIixpY29uOlwiaWNvbi1pbmZvLXNpZ25cIixhcnJvdzonaWNvbi1hbmdsZS1yaWdodCcsc2Vjb25kOltcclxuICAgICAgICAgICAge25hbWU6J3NlY29uZC0xJ30sXHJcbiAgICAgICAgICAgIHtuYW1lOidzZWNvbmQtMid9LFxyXG4gICAgICAgICAgICB7bmFtZTonc2Vjb25kLTMnfVxyXG4gICAgICAgIF19XHJcbiAgICBdO1xyXG4gICAgLyokc2NvcGUubGlzdERhdGE9W1xyXG4gICAgICAgIHtuYW1lOlwibGlzdGl0ZW0xXCIsaWNvbjpcImljb24tbGlzdFwiLGFycm93OidpY29uLWFuZ2xlLXJpZ2h0J30sXHJcbiAgICAgICAge25hbWU6XCJsaXN0aXRlbTJcIixpY29uOlwiaWNvbi1pbmZvLXNpZ25cIixhcnJvdzonaWNvbi1hbmdsZS1yaWdodCd9LFxyXG4gICAgICAgIHtuYW1lOlwibGlzdGl0ZW0zXCIsaWNvbjpcImljb24taW5mby1zaWduXCIsYXJyb3c6J2ljb24tYW5nbGUtcmlnaHQnfSxcclxuICAgICAgICB7bmFtZTpcImxpc3RpdGVtNFwiLGljb246XCJpY29uLWluZm8tc2lnblwiLGFycm93OidpY29uLWFuZ2xlLXJpZ2h0J31cclxuICAgIF07Ki9cclxuICAgIC8qJHNjb3BlLmxpc3REYXRhPVtcclxuICAgICB7bmFtZTpcImxpc3RpdGVtMVwifSxcclxuICAgICB7bmFtZTpcImxpc3RpdGVtMlwifSxcclxuICAgICB7bmFtZTpcImxpc3RpdGVtM1wifSxcclxuICAgICB7bmFtZTpcImxpc3RpdGVtNFwifVxyXG4gICAgIF07Ki9cclxuICAgIC8qJHNjb3BlLmxpc3REYXRhPVtcclxuICAgICB7bmFtZTpcImxpc3RpdGVtMVwiLGljb246XCJpY29uLWxpc3RcIn0sXHJcbiAgICAge25hbWU6XCJsaXN0aXRlbTJcIixpY29uOlwiaWNvbi1pbmZvLXNpZ25cIn0sXHJcbiAgICAge25hbWU6XCJsaXN0aXRlbTNcIixpY29uOlwiaWNvbi1pbmZvLXNpZ25cIn0sXHJcbiAgICAge25hbWU6XCJsaXN0aXRlbTRcIixpY29uOlwiaWNvbi1pbmZvLXNpZ25cIn1cclxuICAgICBdOyovXHJcbn0pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEFkbWluaXN0cmF0b3Igb24gMTYtOC0yOC5cclxuICovXHJcbi8vY29udGVjdCBjb250cm9sbGVyXHJcbmFwcC5jb250cm9sbGVyKFwiY29udGVjdEN0bGVyXCIsZnVuY3Rpb24oJHNjb3BlKXtcclxuICAgIGNvbnNvbGUubG9nKFwiY29udGVjdEN0bGVyXCIpO1xyXG59KTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBBZG1pbmlzdHJhdG9yIG9uIDE2LTgtMjAuXHJcbiAqL1xyXG4vKipcclxuICogbmF2VG9wXHJcbiAqICovXHJcbmFwcC5kaXJlY3RpdmUoJ25hdlRvcCcsZnVuY3Rpb24oKXtcclxuICAgIHJldHVybnsgXHJcbiAgICAgICAgcmVzdHJpY3Q6J0UnLFxyXG4gICAgICAgIHJlcGxhY2U6dHJ1ZSxcclxuICAgICAgICBzY29wZTp7XHJcbiAgICAgICAgICAgIHRpdGxlOic9bmF2dG9wVGl0bGUnLFxyXG4gICAgICAgICAgICBpY29ucmlnaHQ6Jz1pY29ucmlnaHQnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0ZW1wbGF0ZTonPG5hdiBjbGFzcz1cImZsZXgtYm94IG5hdnRvcFwiPicrXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJmbGV4LWl0ZW0gaWNvbnJlYmFjayBpY29uLWFuZ2xlLWxlZnRcIiBuZy1jbGljaz1cInJldHVybmJhY2soKVwiPjwvZGl2PicrXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJmbGV4LWl0ZW0gdGl0bGVcIj57e3RpdGxlfX08L2Rpdj4nK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZmxleC1pdGVtIGljb25yaWdodFwiPnt7aWNvbnJpZ2h0fX08L2Rpdj4nK1xyXG4gICAgICAgICc8L25hdj4nLFxyXG4gICAgICAgIGxpbms6ZnVuY3Rpb24oc2NvcGUsZWxlbSxhdHRycyxjb250cm9sbGVyaW5zdGFuY2Upe1xyXG4gICAgICAgICAgICBzY29wZS5yZXR1cm5iYWNrPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5nbygtMSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSk7XHJcbi8vbWVudWJvdHRvbVxyXG5hcHAuZGlyZWN0aXZlKCduYXZCb3R0b20nLGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm57XHJcbiAgICAgICAgcmVzdHJpY3Q6J0VBJyxcclxuICAgICAgICByZXBsYWNlOnRydWUsXHJcbiAgICAgICAgc2NvcGU6e30sXHJcbiAgICAgICAgdGVtcGxhdGU6JzxuYXYgY2xhc3M9XCJmbGV4LWJveCBuYXZib3R0b21cIj4nK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZmxleC1pdGVtIGZsZXgtYm94LXZlclwiIHVpLXNyZWY9XCJkZWZhdWx0XCI+JytcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImljb24taG9tZSBmbGV4LWJveFwiPjwvZGl2PicrXHJcbiAgICAgICAgJzxwIGNsYXNzPVwiZmxleC1ib3hcIj7pppbpobU8L3A+JytcclxuICAgICAgICAnPC9kaXY+JytcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImZsZXgtaXRlbSBmbGV4LWJveC12ZXJcIiB1aS1zcmVmPVwiZXhhbXBsZVwiPicrXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJpY29uLWxpc3QgZmxleC1ib3hcIj48L2Rpdj4nK1xyXG4gICAgICAgICc8cCBjbGFzcz1cImZsZXgtYm94XCI+5Li+5L6LPC9wPicrXHJcbiAgICAgICAgJzwvZGl2PicrXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJmbGV4LWl0ZW0gZmxleC1ib3gtdmVyXCIgdWktc3JlZj1cImludHJvZHVjZVwiPicrXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJpY29uLWluZm8tc2lnbiBmbGV4LWJveFwiPjwvZGl2PicrXHJcbiAgICAgICAgJzxwIGNsYXNzPVwiZmxleC1ib3hcIj7or7TmmI48L3A+JytcclxuICAgICAgICAnPC9kaXY+JytcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImZsZXgtaXRlbSBmbGV4LWJveC12ZXJcIiB1aS1zcmVmPVwiY29udGVjdFwiPicrXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJpY29uLWNvbW1lbnRzIGZsZXgtYm94XCI+PC9kaXY+JytcclxuICAgICAgICAnPHAgY2xhc3M9XCJmbGV4LWJveFwiPuiBlOezuzwvcD4nK1xyXG4gICAgICAgICc8L2Rpdj4nK1xyXG4gICAgICAgICc8L25hdj4nLFxyXG4gICAgICAgIGxpbms6ZnVuY3Rpb24oc2NvcGUsZWxlbSxhdHRycyxjb250cm9sbGVyaW5zdGFuY2Upe1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pO1xyXG4vL2xpc3RcclxuYXBwLmRpcmVjdGl2ZSgnbGlzdFZpZXcnLGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm57XHJcbiAgICAgICAgcmVzdHJpY3Q6J0UnLFxyXG4gICAgICAgIHJlcGxhY2U6dHJ1ZSxcclxuICAgICAgICBzY29wZTp7XHJcbiAgICAgICAgICAgIGxpc3REYXRhOic9J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGVtcGxhdGU6Jzx1bCBjbGFzcz1cImxpc3R2aWV3XCIgbmctY2xpY2s9XCJzaG93TmV4dExldmVsKCRldmVudClcIj4nK1xyXG4gICAgICAgICAgICAgICAgICAgICc8bGkgY2xhc3M9XCJpdGVtXCIgbmctcmVwZWF0PVwibGlzdGl0ZW0gaW4gbGlzdERhdGEgdHJhY2sgYnkgJGluZGV4XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaWNvbiB7e2xpc3RpdGVtLmljb259fVwiPjwvZGl2PicrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd7e2xpc3RpdGVtLm5hbWV9fScrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiYXJyb3cge3tsaXN0aXRlbS5hcnJvd319XCI+PC9kaXY+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzx1bCBjbGFzcz1cInNlY29uZGxldmVsXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGxpIGNsYXNzPVwic2Vjb25kaXRlbVwiIG5nLXJlcGVhdD1cInNlY29uZCBpbiBsaXN0aXRlbS5zZWNvbmQgdHJhY2sgYnkgJGluZGV4XCI+e3tzZWNvbmQubmFtZX19PC9saT4nK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC91bD4nK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2xpPicrXHJcbiAgICAgICAgICAgICAgICAnPC91bD4nLFxyXG4gICAgICAgIGxpbms6ZnVuY3Rpb24oc2NvcGUsZWxlbSxhdHRycyxjb250cm9sbGVyaW5zdGFuY2Upe1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICoganVkZ2Ugd2hpY2gga2luZCBvZiBsaXN0dmlldyB0byBzaG93XHJcbiAgICAgICAgICAgICAqIGhhc0ljb24gbWVhbnMgbGlzdHZpZXcgaXRlbSBoYXMgaWNvbiBvbiBsZWZ0XHJcbiAgICAgICAgICAgICAqIGhhc0Fycm93IG1lYW5zIGxpc3R2aWV3IGl0ZW0gaGFzIGFycm93IG9uIHJpZ2h0IGFuZCB3aWxsIGhhdmUgY2hpbGQgbGV2ZWxcclxuICAgICAgICAgICAgICogKiovXHJcbiAgICAgICAgICAgIHZhciBoYXNJY29uPWZhbHNlLGhhc0Fycm93PWZhbHNlO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2NvcGUubGlzdERhdGEsZnVuY3Rpb24oaXRlbSxpbmRleCl7XHJcbiAgICAgICAgICAgICAgICBpZihpdGVtLmljb24mJmVsZW1bMF0uY2xhc3NOYW1lLmluZGV4T2YoJ2hhc0ljb24nKTwwKXtcclxuICAgICAgICAgICAgICAgICAgICBoYXNJY29uPXRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihpdGVtLmFycm93JiZlbGVtWzBdLmNsYXNzTmFtZS5pbmRleE9mKCdoYXNBcnJvdycpPDApe1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0Fycm93PXRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZihoYXNJY29uKXtcclxuICAgICAgICAgICAgICAgIGVsZW1bMF0uY2xhc3NOYW1lPWVsZW1bMF0uY2xhc3NOYW1lK1wiIGhhc0ljb25cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihoYXNBcnJvdyl7XHJcbiAgICAgICAgICAgICAgICBlbGVtWzBdLmNsYXNzTmFtZT1lbGVtWzBdLmNsYXNzTmFtZStcIiBoYXNBcnJvd1wiO1xyXG4gICAgICAgICAgICAgICAgc2NvcGUuc2hvd05leHRMZXZlbD1mdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlLnNyY0VsZW1lbnQpOy8vc2hpamlhbmRhaWxpIHpoYW9kYW9jaHVmYXNoaWppYW55dWFuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9MaT0gZS5zcmNFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvVWxTZWNvbmQ9IGUuc3JjRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuc2Vjb25kbGV2ZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihvVWxTZWNvbmQuY2xhc3NOYW1lLmluZGV4T2YoJ2FjdGl2ZScpPjApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvVWxTZWNvbmQuY2xhc3NOYW1lPW9VbFNlY29uZC5jbGFzc05hbWUuc3BsaXQoJyBhY3RpdmUnKS5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYUxpPWVsZW1bMF0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaXRlbScpLGxlbj1hTGkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDtpPGxlbjtpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9TZWNVbD1hTGlbaV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3VsJylbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihvU2VjVWwuY2xhc3NOYW1lLmluZGV4T2YoJ2FjdGl2ZScpPjApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9TZWNVbC5jbGFzc05hbWU9b1NlY1VsLmNsYXNzTmFtZS5zcGxpdCgnIGFjdGl2ZScpLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb1VsU2Vjb25kLmNsYXNzTmFtZSs9XCIgYWN0aXZlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuYXBwLmRpcmVjdGl2ZSgnY2hhclJvb20nLGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlZGlyZWN0OlwiRVwiLFxyXG4gICAgICAgIHJlcGxhY2U6XCJ0cnVlXCIsXHJcbiAgICAgICAgc2NvcGU6e30sXHJcbiAgICAgICAgY29udHJvbGxlcjpcImNvbnRlY3RDdGxlclwiLFxyXG4gICAgICAgIGxpbms6ZnVuY3Rpb24oc2NvcGUsZWxlbSxhdHRycyxjb250cm9sbGVyaW5zdGFuY2Upe31cclxuICAgIH07XHJcbn0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSBBZG1pbmlzdHJhdG9yIG9uIDE2LTgtMTEuXG4gKi9cbmNvbnNvbGUubG9nKCd1dGlsJyk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
